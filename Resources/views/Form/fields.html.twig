{% extends 'bootstrap_3_layout.html.twig' %}
{% block form_help -%}
  {% for attrname, attrvalue in attr %}
    {% if attrname == 'help' and attrvalue %}
      <span class="help-block ">
            <em class="fa fa-info-circle" aria-hidden="true"></em>
        {{ attrvalue|trans }}
          </span>
    {% endif %}
  {% endfor %}
{%- endblock form_help %}

{%- block button_widget -%}
  {%- if label is empty -%}
    {%- if label_format is not empty -%}
      {% set label = label_format|replace({
        '%name%': name,
        '%id%': id,
      }) %}
    {%- else -%}
      {% set label = name|humanize %}
    {%- endif -%}
  {%- endif -%}
  <button type="{{ type|default('button') }}" {{ block('button_attributes') }}>
    {% for attrname, attrvalue in attr %}
      {% if attrname == 'icon' and attrvalue %}
        <i class="{{ attrvalue }}" aria-hidden="true"></i>
      {% endif %}
    {% endfor %}
    {{ translation_domain is same as(false) ? label : label|trans({}, translation_domain) }}
  </button>
{%- endblock button_widget -%}

{% block form_row -%}
  <div class="form-group{% if (not compound or force_error|default(false)) and not valid %} has-error{% endif %}">
    {{- form_label(form) -}}
    {{- form_widget(form) -}}
    {{- form_errors(form) -}}
    {{- block('form_help') -}}
  </div>
{%- endblock form_row %}

{% block html_widget %}
  {% spaceless %}
    {% if attr.class is defined and attr.background is defined and attr.color is defined %}
      <div class="{{ attr.class }}"
           style="background-color: {{ attr.background }} !important;color: {{ attr.color }} !important;">
        {{ value|raw }}
      </div>
    {% elseif attr.class is defined %}
      <div class="{{ attr.class }}">
        {{ value|raw }}
      </div>
    {% else %}
      <div>
        {{ value|raw }}
      </div>
    {% endif %}

  {% endspaceless %}
{% endblock html_widget %}

{% block porcentage_widget %}
  {% spaceless %}
    <div class="form-group price-type">
      <label class="sr-only">Percentage (%)</label>
      <div class="input-group">
        <input type="text" {{ block('widget_attributes') }}
            {% if value is not empty %}value="{{ value }}" {% endif %}/>
        <div class="input-group-addon">%</div>
      </div>
    </div>
  {% endspaceless %}
{% endblock porcentage_widget %}

{% block price_widget %}
  {% spaceless %}
    <div class="form-group price-type">
      <label class="sr-only">Amount (in euros)</label>
      <div class="input-group">
        <input type="text" {{ block('widget_attributes') }}
            {% if value is not empty %}value="{{ value }}" {% endif %}/>
        <div class="input-group-addon">&euro;</div>
      </div>
    </div>
  {% endspaceless %}
{% endblock price_widget %}

{% block money_widget %}
  {% spaceless %}
    <div class="form-group money-type">
      <label class="sr-only">Amount</label>
      <div class="input-group">
        <input type="text" {{ block('widget_attributes') }}
            {% if value is not empty %}value="{{ value }}" {% endif %}/>
        <div class="input-group-addon"><i class="fa fa-money"></i></div>
      </div>
    </div>
  {% endspaceless %}
{% endblock money_widget %}

{% block percentage_widget %}
  {% spaceless %}
    <div class="input-group percentage-type">
      <input type="text" {{ block('widget_attributes') }}
          {% if value is not empty %}value="{{ value }}" {% endif %}/>
      <div class="input-group-addon">%</div>
    </div>
  {% endspaceless %}
{% endblock percentage_widget %}

{% block gb_size_widget %}
  {% spaceless %}
    <div class="input-group gb-size-type">
      <input type="text" {{ block('widget_attributes') }}
          {% if value is not empty %}value="{{ value }}" {% endif %}/>
      <div class="input-group-addon">GB</div>
    </div>
  {% endspaceless %}
{% endblock gb_size_widget %}

{% block color_widget %}
  {% spaceless %}
    <div class="input-group colorpicker-component colorpicker-element">
      <input type="text" {{ block('widget_attributes') }}
          {% if value is not empty %}value="{{ value }}" {% endif %}/>
      <span class="input-group-addon"><i style="background: {{ value }}"></i></span>
    </div>
  {% endspaceless %}
{% endblock color_widget %}

{% block select_ajax_widget %}
  {% spaceless %}
    <select {{ block('widget_attributes') }} data-url="{{ route }}" {% if multiple %}multiple{% endif %}>
      {% for key, choice in choices %}
        {% set selected = false %}
        {% if multiple %}
          {% for data in value %}
            {% if data == choice.value %}
              {% set selected = true %}
            {% endif %}
          {% endfor %}
        {% else %}
          {% if value == choice.value %}
            {% set selected = true %}
          {% endif %}
        {% endif %}
        <option value="{{ choice.value }}" {% if selected %}selected{% endif %}>
          {{ choice.label }}
        </option>
      {% endfor %}
    </select>
  {% endspaceless %}
{% endblock %}

{% block entity_ajax_widget %}
  {% spaceless %}
    <select {{ block('widget_attributes') }} data-url="{{ route }}" {% if multiple %}multiple{% endif %}>
      {% for key, choice in choices %}
        {% set selected = false %}
        {% if multiple %}
          {% for data in value %}
            {% if data == choice.value %}
              {% set selected = true %}
            {% endif %}
          {% endfor %}
        {% else %}
          {% if value == choice.value %}
            {% set selected = true %}
          {% endif %}
        {% endif %}
        <option value="{{ choice.value }}" {% if selected %}selected{% endif %}>
          {{ choice.label }}
        </option>
      {% endfor %}
    </select>
  {% endspaceless %}
{% endblock %}

{% block cropper_widget %}
  {% spaceless %}
    <link rel="stylesheet" href="{{ asset('assets/css/cropper.css') }}">
    <style>
      {% set bgImage = 'none' %}
      {% if bgCropperImage is not null %}
        {% set bgImage = 'url(' ~ asset(bgCropperImage) ~ ')' %}
      {% endif %}
      {% set opacity = bgCropperOpacity %}
      .cropper-view-box, .cropper-face {
        background: {{ bgImage }};
        background-size: contain;
        opacity: {{ bgCropperOpacity }};
      }
    </style>
    <div class="box box-solid">
      <div class="box-header">
        <h3 class="box-title"><i class="fa fa-pencil"></i> {{ 'crop current image'|trans|capitalize }}</h3>
      </div>
      <div class="box-body">
        <div class="col-sm-6 col-sm-offset-3">
          <img id="cropperImage" src="{{ vich_uploader_asset(image, 'originalImageFile') }}">
        </div>
      </div>
    </div>
    <div class="box box-solid">
      <div class="box-header">
        <h3 class="box-title"><i class="fa fa-pencil"></i> {{ 'load new image'|trans|capitalize }}</h3>
      </div>
      <div class="box-body">
        {{ form_row(form.originalImageFile) }}
      </div>
    </div>
    {{ form_row(form.data) }}
    {{ form_row(form.canvasData) }}
    {{ form_row(form.cropBoxData) }}
    {{ form_row(form.base64) }}
    <script src="{{ asset('assets/js/cropper.js') }}"></script>
    <script>
        $(document).ready(function () {
                var image = document.getElementById('cropperImage');

                var croppable = false;
                var cropper = new Cropper(image, {
                    viewMode: 0,
                    dragMode: 'move',
                    autoCrop: true,
                    initialAspectRatio: 1.4,
                    aspectRatio: 1.4,
                    guides: false,
                    center: false,
                    highlight: true,
                    cropBoxMovable: false,
                    cropBoxResizable: false,
                    ready: function () {
                        croppable = true;

                      {% if image.data != '' %}
                        var data = JSON.parse('{{ image.data|raw }}');
                        cropper.setData(data);
                      {% endif %}

                      {% if image.canvasData != '' %}
                        var canvasData = JSON.parse('{{ image.canvasData|raw }}');
                        cropper.setCanvasData(canvasData);
                      {% endif %}

                      {% if image.cropBoxData != '' %}
                        var cropBoxData = JSON.parse('{{ image.cropBoxData|raw }}');
                        cropper.setCropBoxData(cropBoxData);
                      {% endif %}
                    },
                });

                var $form = $('form[name="{{ formName }}"]');
                $form.submit(function (e) {
                    //e.preventDefault();
                    var croppedCanvas;

                    if (!croppable) {
                        return;
                    }

                    croppedCanvas = cropper.getCroppedCanvas();

                    var data = cropper.getData();
                    var canvasData = cropper.getCanvasData();
                    var cropBoxData = cropper.getCropBoxData();

                    data = {
                        'x': data.x,
                        'y': data.y,
                        'width': data.width,
                        'height': data.height,
                        'rotate': data.rotate,
                        'scaleX': data.scaleX,
                        'scaleY': data.scaleY
                    };
                    canvasData = {
                        'left': canvasData.left,
                        'top': canvasData.top,
                        'width': canvasData.width,
                        'height': canvasData.height,
                        'naturalWidth': canvasData.naturalWidth,
                        'naturalHeight': canvasData.naturalHeight,
                        'aspectRatio': canvasData.width / canvasData.height
                    };
                    cropBoxData = {
                        'left': cropBoxData.left,
                        'top': cropBoxData.top,
                        'width': cropBoxData.width,
                        'height': cropBoxData.height
                    };

                    $('#{{ entityName }}_cropperImage_data').val(JSON.stringify(data));
                    $("#{{ entityName }}_cropperImage_canvasData").val(JSON.stringify(canvasData));
                    $('#{{ entityName }}_cropperImage_cropBoxData').val(JSON.stringify(cropBoxData));
                    $('#{{ entityName }}_cropperImage_base64').val(croppedCanvas.toDataURL());
                });


                var $input = $('#{{ entityName }}_cropperImage_originalImageFile_file');
                $input.on('change', function () {
                    var current = $(this)[0];
                    if (current.files && current.files[0]) {
                        var reader = new FileReader();

                        reader.onload = function (event) {
                            cropper.destroy();

                            $("#cropperImage").attr('src', event.target.result);
                            image = document.getElementById('cropperImage');
                            cropper = new Cropper(image, {
                                viewMode: 0,
                                dragMode: 'move',
                                autoCrop: true,
                                initialAspectRatio: 1.4,
                                aspectRatio: 1.4,
                                guides: false,
                                center: false,
                                highlight: true,
                                cropBoxMovable: false,
                                cropBoxResizable: false,
                                ready: function () {
                                    croppable = true;
                                },
                            });
                        };

                        reader.readAsDataURL(current.files[0]);
                    } else {
                        console.log('Sorry - you\'re browser doesn\'t support the FileReader API');
                    }

                });
            }
        );
    </script>
  {% endspaceless %}
{% endblock %}